{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Load Balancer for Docker Swarm Cluster",
  "Conditions": {
    "Has3Azs": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "AWSRegion2AZ",
            {
              "Ref": "AWS::Region"
            },
            "NumAZs"
          ]
        },
        "3"
      ]
    }
  },
  "Mappings": {
    "AWSRegion2AZ": {
      "ap-northeast-1": {
        "NumAZs": "2"
      },
      "ap-northeast-2": {
        "NumAZs": "2"
      },
      "ap-south-1": {
        "NumAZs": "2"
      },
      "ap-southeast-1": {
        "NumAZs": "2"
      },
      "ap-southeast-2": {
        "NumAZs": "2"
      },
      "ca-central-1": {
        "NumAZs": "2"
      },
      "eu-central-1": {
        "NumAZs": "3"
      },
      "eu-west-1": {
        "NumAZs": "3"
      },
      "eu-west-2": {
        "NumAZs": "2"
      },
      "sa-east-1": {
        "NumAZs": "3"
      },
      "us-east-1": {
        "NumAZs": "4"
      },
      "us-east-2": {
        "NumAZs": "3"
      },
      "us-west-1": {
        "NumAZs": "2"
      },
      "us-west-2": {
        "NumAZs": "3"
      }
    }
  },
  "Parameters": {
    "ServerCertificate": {
      "ConstraintDescription": "Must be a valid Certificate Arn",
      "Description": "Name for ACM Certificate",
      "Type": "String"
    }
  },
  "Outputs": {
    "LoadBalancer": {
      "Description": "LoadBalancer for Public Access",
      "Value": {
        "Ref": "LoadBalancer"
      },
      "Export": {
        "Name": "LoadBalancer"
      }
    },
    "HTTPListener": {
      "Description": "LoadBalancer HTTP listener",
      "Value": {
        "Ref": "HTTPListener"
      },
      "Export": {
        "Name": "HTTPListener"
      }
    },
    "HTTPSListener": {
      "Description": "LoadBalancer HTTPS listener",
      "Value": {
        "Ref": "HTTPSListener"
      },
      "Export": {
        "Name": "HTTPSListener"
      }
    }
  },
  "Resources": {
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme" : "internet-facing",
        "LoadBalancerAttributes": [
        ],
        "SecurityGroups": [
          {
            "Fn::ImportValue": "PublicAccess"
          }
        ],
        "Subnets": [
          {
            "Fn::ImportValue": "PubSubnetAz1"
          },
          {
            "Fn::ImportValue": "PubSubnetAz2"
          },
          {
            "Fn::If": [
              "Has3Azs",
              { "Fn::ImportValue": "PubSubnetAz3" },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "LoadBalancer"
                ]
              ]
            }
          }
        ]
      }
    },
    "DenyTargetGroup": {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": 65535,
        "HealthCheckTimeoutSeconds": 3,
        "HealthyThresholdCount": 4,
        "UnhealthyThresholdCount": 3,
        "Protocol": "HTTP",
        "Port": 65535,
        "Targets": [],
        "VpcId": {
          "Fn::ImportValue" : "Vpc"
        },
        "Tags" : [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "DenyTargetGroup"
                ]
              ]
            }
          }
        ]
      }
    },
    "HTTPListener" : {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": { "Ref": "DenyTargetGroup" },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref" : "LoadBalancer"
        },
        "Protocol": "HTTP",
        "Port": "80"
      }
    },
    "HTTPSListener" : {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": { "Ref": "DenyTargetGroup" },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref" : "LoadBalancer"
        },
        "Certificates": [
          {
            "CertificateArn": { "Ref": "ServerCertificate" }
          }
        ],
        "Protocol": "HTTPS",
        "Port": "443"
      }
    }
  }
}
